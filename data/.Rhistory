var_Dim1 <- as.data.frame(cbind(coord_var$Dim.1, contrib_var$Dim.1 , cor_var$Dim.1))
var_Dim2 <- as.data.frame(cbind(coord_var$Dim.2, contrib_var$Dim.2 , cor_var$Dim.2))
colnames(var_Dim2) <- c("Dim2", "contrib", "correlation")
colnames(var_Dim1) <- c("Dim1", "contrib", "correlation")
colnames(var_Dim3) <- c("Dim3", "contrib", "correlation")
row.names(var_Dim2) <- row.names(coord_var)
row.names(var_Dim1) <- row.names(coord_var)
row.names(var_Dim3) <- row.names(coord_var)
# annotate (there is duplicate names for some variables)
#load annotation file
todo_annot <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/todo_annot.csv"), row.names=1, header=T, na.strings=c("","NA"))
var_Dim2_annot <- cbind(todo_annot[match(row.names(var_Dim2), todo_annot$X),], var_Dim2)
var_Dim2_annot$type <- c(rep("mRNA", 1000), rep("miRNA", 212), rep("metabolome", 798))
var_Dim1_annot <- cbind(todo_annot[match(row.names(var_Dim1), todo_annot$X),], var_Dim1)
var_Dim3_annot <- cbind(todo_annot[match(row.names(var_Dim3), todo_annot$X),], var_Dim3)
var_Dim1_annot$type <- c(rep("mRNA", 1000), rep("miRNA", 212), rep("metabolome", 798))
var_Dim3_annot$type <- c(rep("mRNA", 1000), rep("miRNA", 212), rep("metabolome", 798))
View(var_Dim1_annot)
var_Dim1_annot$FC <- ooo
var_Dim2_annot$FC <- ooo
var_Dim3_annot$FC <- ooo
View(todo_annot)
todo_annot$X <- gsub("-", ".", todo_annot$X)
var_Dim2_annot <- cbind(todo_annot[match(row.names(var_Dim2), todo_annot$X),], var_Dim2)
View(var_Dim2_annot)
var_Dim2_annot$type <- c(rep("mRNA", 1000), rep("miRNA", 212), rep("metabolome", 798))
var_Dim3_annot <- cbind(todo_annot[match(row.names(var_Dim3), todo_annot$X),], var_Dim3)
var_Dim1_annot <- cbind(todo_annot[match(row.names(var_Dim1), todo_annot$X),], var_Dim1)
var_Dim1_annot$type <- c(rep("mRNA", 1000), rep("miRNA", 212), rep("metabolome", 798))
var_Dim3_annot$type <- c(rep("mRNA", 1000), rep("miRNA", 212), rep("metabolome", 798))
var_Dim1_annot$FC <- ooo
var_Dim2_annot$FC <- ooo
var_Dim3_annot$FC <- ooo
View(var_Dim1_annot)
View(var_Dim3_annot)
ppp <- ggplot(var_Dim1_annot, aes(log2(abs(var_Dim1_annot$contrib)), log2(var_Dim1_annot$FC)))
ppp + geom_point(aes(colour = var_Dim1_annot$type, size = 0.1, alpha = 0.5)) +
labs (y = "FC", x = "contribution")
ppp <- ggplot(var_Dim1_annot, aes(var_Dim1_annot$contrib, var_Dim1_annot$FC))
ppp + geom_point(aes(colour = var_Dim1_annot$type, size = 0.1, alpha = 0.5)) +
labs (y = "FC", x = "contribution")
ppp <- ggplot(var_Dim1_annot, aes(log2(var_Dim1_annot$contrib), var_Dim1_annot$FC))
ppp + geom_point(aes(colour = var_Dim1_annot$type, size = 0.1, alpha = 0.5)) +
labs (y = "FC", x = "contribution")
ppp + geom_point(aes(colour = var_Dim1_annot$type, size = 0.1, alpha = 0.5)) +
labs (y = "FC", x = "log2(contribution)")
ppp <- ggplot(var_Dim2_annot, aes(log2(var_Dim2_annot$contrib), var_Dim2_annot$FC))
ppp + geom_point(aes(colour = var_Dim1_annot$type, size = 0.1, alpha = 0.5)) +
labs (y = "FC", x = "log2(contribution)")
ppp <- ggplot(var_Dim3_annot, aes(log2(var_Dim3_annot$contrib), var_Dim3_annot$FC))
ppp + geom_point(aes(colour = var_Dim3_annot$type, size = 0.1, alpha = 0.5)) +
labs (y = "FC", x = "log2(contribution)")
var_Dim3_annot$Y <- as.character(var_Dim3_annot$Y)
var_Dim3_annot$Y[is.na(var_Dim3_annot$Y)] <- as.character(var_Dim3_annot$X[is.na(var_Dim3_annot$Y)])
var_Dim3_annot <- var_Dim3_annot[order(var_Dim3_annot$contrib, decreasing = TRUE),]
var_Dim3_annot$Y <- factor(var_Dim3_annot$Y ,levels = unique(var_Dim3_annot$Y))
### Inspect top key variables
grafico <- ggplot(var_Dim3_annot[1:20,], aes(y=contrib, x=Y, fill=var_Dim3_annot$type[1:20]))
grafico + geom_segment(aes(colour=var_Dim3_annot$type[1:20], x=Y, xend=Y, y=-5,size=1, yend=contrib-1)) +
geom_point( aes(colour=var_Dim3_annot$type[1:20]), size=6, alpha=0.8, shape=21, stroke=2) +
theme_classic() +
theme(plot.margin = margin(1.5, 1.5, 1.5, 1.5, "cm") ,axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (title= "Top contributors to Dimension2",y = "Contribution (%)", x = "") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(0, 30))
View(var_Dim3_annot)
BiocManager::install("mixOmics")
### mixOmics - DIABLO
library(mixOmics)
data(breast.TCGA)
mrna <- breast.TCGA$data.train$mrna
protein <- breast.TCGA$data.train$protein)
protein <- breast.TCGA$data.train$protein
View(protein)
View(mrna)
mfa_data <- read.csv("C:/Users/Aitor/Desktop/Grecia/MFA/mfa_data.csv")
View(mfa_data)
Y <- breast.TCGA$data.train$subtype
Y
View(mfa_data)
###
mfa_data <- read.csv("C:/Users/Aitor/Desktop/Grecia/MFA/mfa_data.csv", row.names = 1)
View(mfa_data)
mRNA <- mfa_data[,1:1000]
miRNA <-  mfa_data[,1001:1212]
metabolomics <- mfa_data[,1213:2010]
View(metabolomics)
View(miRNA)
Y <- as.factor(rep("DMSO", 5), rep("MKC", 5))
Y <- as.factor(c(rep("DMSO", 5), rep("MKC", 5)))
Y
summary(Y)
X <- list(mRNA = mfa_data[,1:1000],
miRNA = mfa_data[,1001:1212],
metabolomics = mfa_data[,1213:2010])
Y <- as.factor(c(rep("DMSO", 5), rep("MKC", 5)))
MyResult.diablo <- block.splsda(X, Y)
plotIndiv(MyResult.diablo)
plotVar(MyResult.diablo)
circosPlot(MyResult.diablo, cutoff=0.9)
MyResult.diablo$call
uuu <- MyResult.diablo$ind.mat
View(uuu)
uuu <- MyResult.diablo$ncomp
MyResult.diablo$variates
head(MyResult.diablo$loadings)
ooo <- MyResult.diablo$loadings
uuu <- ooo$metabolomics
View(uuu)
`43399_gene_score_5fold._.MDA231.untreated` <- read.delim("C:/Users/Aitor/Desktop/Chip-seq_MDA_231_unt,_hypoxia_glucose_depr/43399_gene_score_5fold _ MDA231 untreated.txt", header=FALSE, comment.char="#")
View(`43399_gene_score_5fold._.MDA231.untreated`)
CHIP_untreated <- 43399_gene_score_5fold._.MDA231.untreated
CHIP_untreated <- read.delim("C:/Users/Aitor/Desktop/Chip-seq_MDA_231_unt,_hypoxia_glucose_depr/43399_gene_score_5fold _ MDA231 untreated.txt", header=FALSE, comment.char="#")
colnames(CHIP_untreated) <- c("#chrom",	"txStart",	"txEnd",	"refseq",	"score"	"strand",	"symbol")
colnames(CHIP_untreated) <- c("chrom",	"txStart",	"txEnd",	"refseq",	"score"	"strand",	"symbol")
View(CHIP_untreated)
colnames(CHIP_untreated) <- c("#chrom",	"txStart",	"txEnd",	"refseq",	"score",	"strand",	"symbol")
# select only GENE and peak intensity, columns 5&7
CHIP_untreated_SHORT <- CHIP_untreated[,c(5,7)]
View(CHIP_untreated_SHORT)
# consolidate duplicated IDs (SUM PEAKS FOR EVERY GENE... probably not the best but weh)
CHIP_untreated_SHORT <- ddply(CHIP_untreated_SHORT,2,numcolwise(sum))
### EMMA RNASEQ vs CHIPSEQ INTEGRATION
library(plyr)
# consolidate duplicated IDs (SUM PEAKS FOR EVERY GENE... probably not the best but weh)
CHIP_untreated_SHORT <- ddply(CHIP_untreated_SHORT,2,numcolwise(sum))
table(CHIP_untreated_SHORT$score > 0)
## load normalized, sva adjusted counts from edgeR
counts <- read.delim("C:/Users/Aitor/Desktop/Grecia/Paintomics/Our data/raw_data/counts.txt", comment.char="#")
counts_short <- counts[,7:30]
row.names(counts_short) <- counts$Geneid
## metadata
samples <- as.data.frame(cbind(rep("a", 24), rep("b", 24), rep("c", 24)))
samples$V1 <- as.factor(c("D8", "D24", "D24", "D8", "D8", "D24", "M24", "M8", "M8", "M8", "M24", "M24", "T8", "T24", "T24", "T24", "T8", "T8", "TM8", "TM8", "TM24", "TM24", "TM8", "TM24"))
samples$V2 <- as.factor(c("R1", "R3", "R2", "R3", "R2", "R1", "R3", "R2", "R1", "R3", "R2", "R1", "R1", "R2", "R3", "R1", "R2", "R3", "R3", "R1", "R2", "R1", "R2", "R3"))
samples$V3 <- as.factor(c("8", "24", "24", "8", "8", "24", "24", "8", "8", "8", "24", "24", "8", "24", "24", "24", "8", "8", "8", "8", "24", "24", "8", "24"))
colnames(samples) <- c("condition","replicate", "times")
row.names(samples) <- substring(colnames(counts_short), 51, 56)
colnames(counts_short) <- rownames(samples)
### EBseqHMM
# statistical analysis in ordered RNA-seq experiments
# identify genes and isoforms that have non-constant expression profile over the time points/positions, and cluster them into expression paths
library("EBSeqHMM")
library("EBSeq")
library("sva")
library("biomaRt")
library("edgeR")
library("sva")
library("RColorBrewer")
keep.exprs <- filterByExpr(counts_short)
counts_short <- counts_short[keep.exprs,]
## Normalisation by the method of trimmed mean of M-values (TMM)
nsamples <- ncol(counts_short)
col <- brewer.pal(nsamples, "Paired")
boxplot(log2(counts_short), col=col, main="")
Sizes <- MedianNorm(counts_short)
norm_counts <- GetNormalizedMat(counts_short, Sizes)
## SVA correction for batch effect
mod1 <- model.matrix(~0 + condition, samples)
mod0 <- model.matrix(~1, samples)
svobj <- svaseq(norm_counts, mod1, mod0)
cleanY = function(y, mod, svs) {
X = cbind(mod, svs)
Hat = solve(t(X) %*% X) %*% t(X)
beta = (Hat %*% t(y))
rm(Hat)
gc()
P = ncol(mod)
return(y - t(as.matrix(X[,-c(1:P)]) %*% beta[-c(1:P),]))
}
cleaned_norm_count <- cleanY(norm_counts, mod1, svobj$sv[,1])
cleaned_norm_count_all <- cleanY(norm_counts, mod1, svobj$sv[,1:4])
cleaned_norm_count <- as.data.frame(cleaned_norm_count)
cleaned_norm_count_all <- as.data.frame(cleaned_norm_count_all)
plotMDS(log2(cleaned_norm_count), top = 1000, labels = NULL, col = as.numeric(samples$condition), cex = 3)
title(main="Treatment groups")
plotMDS(log2(cleaned_norm_count_all), top = 1000, labels = NULL, col = as.numeric(samples$condition), cex = 3)
title(main="Treatment groups")
## Anotate results table with GENE SYMBOL, chromosome, etc.
listEnsembl(GRCh=37)
listEnsembl(version=91)
ensembl = useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
todo_genes <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol','chromosome_name'), mart=ensembl)
cleaned_norm_count_annot <- cbind(todo_genes[match(row.names(cleaned_norm_count), todo_genes$ensembl_gene_id),], cleaned_norm_count)
cleaned_norm_count_annot <- cleaned_norm_count_annot[,c(1,2,3,4,8,7,12,11,13,5,6,9,10,14,15)]
cleaned_norm_count_annot <- cbind(todo_genes[match(row.names(cleaned_norm_count), todo_genes$ensembl_gene_id),], cleaned_norm_count)
View(cleaned_norm_count_annot)
c(1,2,3,4,8,7,12,11,13,5,6,9,10,14,15) + 3
ooo <- c(1,2,3,4,8,7,12,11,13,5,6,9,10,14,15) + 3
cleaned_norm_count_annot <- cleaned_norm_count_annot[,c(1,2,3,ooo)]
cleaned_norm_count_annot <- cbind(todo_genes[match(row.names(cleaned_norm_count), todo_genes$ensembl_gene_id),], cleaned_norm_count)
colnames(cleaned_norm_count)
colnames(cleaned_norm_count_annot)
View(samples)
cleaned_norm_count_annot <- cleaned_norm_count_annot[,c(1,2,3,4,8,7,12,11,13,5,6,9,10,14,15)]
View(cleaned_norm_count_annot)
setwd("~/GitHub/MFA_Omics_Integration/data")
write.csv(cleaned_norm_count_annot, "cleaned_norm_count_annot.csv")
# load RNA-SEQ DATA
RNASEQ <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/cleaned_norm_count_annot.csv"), stringsAsFactors=FALSE)
library(RCurl)
# load RNA-SEQ DATA
RNASEQ <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/cleaned_norm_count_annot.csv"), stringsAsFactors=FALSE)
View(RNASEQ)
View(cleaned_norm_count_annot)
write.csv(cleaned_norm_count_annot, "cleaned_norm_count_annot.csv", row.names = FALSE)
RNASEQ <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/cleaned_norm_count_annot.csv"), stringsAsFactors=FALSE)
View(RNASEQ)
# load RNA-SEQ DATA
RNASEQ <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/cleaned_norm_count_annot.csv"), stringsAsFactors=FALSE)
View(RNASEQ)
colnames(RNASEQ)
# Calculate mean DMSO/MKC FoldChanges for 8h, 24h
RNASEQ$FC8h <-   log2(rowMeans(RNASEQ[,8:10]) / rowMeans(RNASEQ[,5:7]))
# Calculate mean DMSO/MKC FoldChanges for 8h, 24h
RNASEQ$FC8h <-  log2(rowMeans(RNASEQ[,8:10]) / rowMeans(RNASEQ[,5:7]))
RNASEQ$FC24h <-  log2(rowMeans(RNASEQ[,14:16]) / rowMeans(RNASEQ[,11:13]))
View(RNASEQ)
mean(RNASEQ$FC8h)
mean(RNASEQ$FC24h)
library("gplots")
library("UpSetR")
### Venn diagram
Venn_try  <- list(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.5),
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.5),
CHIPSEQ = subset(CHIP_untreated_SHORT$symbol, CHIP_untreated_SHORT$score > 0))
venn(Venn_try)
### Venn diagram
Venn_try  <- list(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.3),
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.3),
CHIPSEQ = subset(CHIP_untreated_SHORT$symbol, CHIP_untreated_SHORT$score > 0))
venn(Venn_try)
### Venn diagram
Venn_try  <- list(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2),
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2),
CHIPSEQ = subset(CHIP_untreated_SHORT$symbol, CHIP_untreated_SHORT$score > 0))
venn(Venn_try)
getwd()
# load data
CHIP_untreated <- read.delim("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/43399_gene_score_5fold _ MDA231 untreated.txt", header=FALSE, comment.char="#")
View(CHIP_untreated)
# name columns
colnames(CHIP_untreated) <- c("#chrom",	"txStart",	"txEnd",	"refseq",	"score",	"strand",	"symbol")
# select only GENE and peak intensity, columns 5&7
CHIP_untreated_SHORT <- CHIP_untreated[,c(5,7)]
lengh
length(unique(CHIP_untreated_SHORT$symbol))
# More fancy
DE_gns <- fromList(DE_list)
library("UpSetR")
install.packages("UpSetR")
library("UpSetR")
# More fancy
DE_gns <- fromList(DE_list)
# More fancy
DE_gns <- fromList(Venn_try)
upset(DE_gns , order.by = "freq")
### Venn diagram
Venn_try  <- list(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2),
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2),
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0))
venn(Venn_try)
# More fancy
DE_gns <- fromList(Venn_try)
upset(DE_gns , order.by = "freq")
# How many genes with XBP1s binding peak > 0 ?
table(CHIP_untreated_SHORT$score > 0)
# name columns
colnames(CHIP_untreated) <- c("#chrom",	"txStart",	"txEnd",	"refseq",	"score",	"strand",	"symbol")
# select only GENE and peak intensity, columns 5&7
CHIP_untreated_SHORT <- CHIP_untreated[,c(5,7)]
# consolidate duplicated IDs (SUM PEAKS FOR EVERY GENE... probably not the best but weh)
CHIP_untreated_SHORT <- ddply(CHIP_untreated_SHORT,2,numcolwise(sum))
# How many genes with XBP1s binding peak > 0 ?
table(CHIP_untreated_SHORT$score > 0)
### Venn diagram
Venn_try  <- list(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2),
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2),
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0))
venn(Venn_try)
# More fancy
DE_gns <- fromList(Venn_try)
upset(DE_gns , order.by = "freq")
# extract intersect genes
gene_hits <- intersection(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2),
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0))
# extract intersect genes
gene_hits <- intersect(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2),
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0))
# extract intersect genes
FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2)
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2)
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0)
gene_hits <- intersect(FC24h,CHIPSEQ)
# gene expression data for "hits"
HITS <- subset(RNASEQ, RNASEQ$hgnc_symbol == gene_hits)
HITS <- RNASEQ[match(RNASEQ$hgnc_symbol, gene_hits),]
u <- match(RNASEQ$hgnc_symbol, gene_hits)
table(u)
# gene expression data for "hits"
HITS <- subset(RNASEQ, RNASEQ$hgnc_symbol == gene_hits)
# gene expression data for "hits"
HITS <- subset(RNASEQ, RNASEQ$hgnc_symbol == c(gene_hits))
HITS <- RNASEQ[match(RNASEQ$hgnc_symbol, gene_hits),]
gene_hits <- as.data.frame(intersect(FC24h,CHIPSEQ))
View(gene_hits)
View(RNASEQ)
# gene expression data for "hits"
HITS <- merge(gene_hits, RNASEQ, by.x = 1, by.y = 3)
View(HITS)
colnames(HITS)
# heatmap of hits
my_palette <- colorRampPalette(c("navy","white","orangered1"))(n = 299)
pheatmap(HITS[,11:16], cluster_cols=FALSE,show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
library(pheatmap)
pheatmap(HITS[,11:16], cluster_cols=FALSE,show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
pheatmap(HITS[,11:16], scale=TRUE,  cluster_cols=FALSE,show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
pheatmap(HITS[,11:16], scale= "row",  cluster_cols=FALSE,show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
row.names(HITS) <- HITS$`intersect(FC24h, CHIPSEQ)`
# heatmap of hits
my_palette <- colorRampPalette(c("navy","white","orangered1"))(n = 299)
pheatmap(HITS[,11:16], scale= "row",  cluster_cols=FALSE,show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
uuu <- myBreaks <- c(seq(0, 100, length.out=ceiling(500) + 1))
myBreaks <- c(seq(-1, 1, length.out=ceiling(300) + 1))
pheatmap(HITS[,11:16], scale= "row",  cluster_cols=FALSE,breaks = myBreaks,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
### EBseqHMM
# statistical analysis in ordered RNA-seq experiments
# identify genes and isoforms that have non-constant expression profile over the time points/positions, and cluster them into expression paths
library("EBSeqHMM")
library("EBSeq")
library("sva")
library("biomaRt")
library("edgeR")
library("sva")
library("RColorBrewer")
## load normalized, sva adjusted counts from edgeR
counts <- read.delim("C:/Users/Aitor/Desktop/Grecia/Paintomics/Our data/raw_data/counts.txt", comment.char="#")
counts_short <- counts[,7:30]
row.names(counts_short) <- counts$Geneid
## metadata
samples <- as.data.frame(cbind(rep("a", 24), rep("b", 24), rep("c", 24)))
samples$V1 <- as.factor(c("D8", "D24", "D24", "D8", "D8", "D24", "M24", "M8", "M8", "M8", "M24", "M24", "T8", "T24", "T24", "T24", "T8", "T8", "TM8", "TM8", "TM24", "TM24", "TM8", "TM24"))
samples$V2 <- as.factor(c("R1", "R3", "R2", "R3", "R2", "R1", "R3", "R2", "R1", "R3", "R2", "R1", "R1", "R2", "R3", "R1", "R2", "R3", "R3", "R1", "R2", "R1", "R2", "R3"))
samples$V3 <- as.factor(c("8", "24", "24", "8", "8", "24", "24", "8", "8", "8", "24", "24", "8", "24", "24", "24", "8", "8", "8", "8", "24", "24", "8", "24"))
colnames(samples) <- c("condition","replicate", "times")
row.names(samples) <- substring(colnames(counts_short), 51, 56)
colnames(counts_short) <- rownames(samples)
keep.exprs <- filterByExpr(counts_short)
counts_short <- counts_short[keep.exprs,]
Sizes <- MedianNorm(counts_short)
norm_counts <- GetNormalizedMat(counts_short, Sizes)
## SVA correction for batch effect
mod1 <- model.matrix(~0 + condition, samples)
mod0 <- model.matrix(~1, samples)
svobj <- svaseq(norm_counts, mod1, mod0)
cleanY = function(y, mod, svs) {
X = cbind(mod, svs)
Hat = solve(t(X) %*% X) %*% t(X)
beta = (Hat %*% t(y))
rm(Hat)
gc()
P = ncol(mod)
return(y - t(as.matrix(X[,-c(1:P)]) %*% beta[-c(1:P),]))
}
cleaned_norm_count <- cleanY(norm_counts, mod1, svobj$sv[,1])
cleaned_norm_count_all <- cleanY(norm_counts, mod1, svobj$sv[,1:4])
cleaned_norm_count <- as.data.frame(cleaned_norm_count)
cleaned_norm_count_all <- as.data.frame(cleaned_norm_count_all)
## Anotate results table with GENE SYMBOL, chromosome, etc.
listEnsembl(GRCh=37)
listEnsembl(version=91)
ensembl = useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
todo_genes <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol','chromosome_name'), mart=ensembl)
cleaned_norm_count_annot <- cbind(todo_genes[match(row.names(cleaned_norm_count), todo_genes$ensembl_gene_id),], cleaned_norm_count)
colnames(cleaned_norm_count)
colnames(cleaned_norm_count_annot)
View(samples)
samples$number <- 1:24
View(samples)
samples <- samples[order(samples$condition),]
samples <- samples[order(samples$times),]
samples <- samples[order(samples$times),]
samples <- samples[order(samples$times, decreasing = TRUE),]
order <- samples$number
View(cleaned_norm_count_annot)
order <- order + 3
order
cleaned_norm_count_annot <- cleaned_norm_count_annot[,order]
View(cleaned_norm_count_annot)
cleaned_norm_count_annot <- cbind(todo_genes[match(row.names(cleaned_norm_count), todo_genes$ensembl_gene_id),], cleaned_norm_count)
cleaned_norm_count_annot <- cbind(cleaned_norm_count_annot[,1:3], cleaned_norm_count_annot[,order])
View(cleaned_norm_count_annot)
getwd()
write.csv(cleaned_norm_count_annot, "cleaned_norm_count_annot.csv")
colnames(cleaned_norm_count_annot)
# load RNA-SEQ DATA
RNASEQ <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/cleaned_norm_count_annot.csv"), stringsAsFactors=FALSE)
# Calculate mean DMSO/MKC FoldChanges for 8h, 24h
RNASEQ$FC8h <-  log2(rowMeans(RNASEQ[,7:9]) / rowMeans(RNASEQ[,4:6]))
View(RNASEQ)
class(RNASEQ$D8R1_1)
write.csv(cleaned_norm_count_annot, "cleaned_norm_count_annot.csv", row.names = FALSE)
# load RNA-SEQ DATA
RNASEQ <- read.csv(text = getURL("https://raw.githubusercontent.com/xaitorx/MFA_Omics_Integration/v1/data/cleaned_norm_count_annot.csv"), stringsAsFactors=FALSE)
# Calculate mean DMSO/MKC FoldChanges for 8h, 24h
RNASEQ$FC8h <-  log2(rowMeans(RNASEQ[,7:9]) / rowMeans(RNASEQ[,4:6]))
View(RNASEQ)
getwd()
View(RNASEQ)
RNASEQ <- RNASEQ[,-1]
# Calculate mean DMSO/MKC FoldChanges for 8h, 24h
RNASEQ$FC8h <-  log2(rowMeans(RNASEQ[,7:9]) / rowMeans(RNASEQ[,4:6]))
RNASEQ$FC24h <-  log2(rowMeans(RNASEQ[,19:21]) / rowMeans(RNASEQ[,16:18]))
### Venn diagram
Venn_try  <- list(FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2),
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2),
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0))
venn(Venn_try)
# More fancy
DE_gns <- fromList(Venn_try)
upset(DE_gns , order.by = "freq")
# extract intersect genes
FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2)
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2)
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0)
gene_hits <- as.data.frame(intersect(FC24h,CHIPSEQ))
# gene expression data for "hits"
# select rows in the gene expression data that correspond to hit genes
HITS <- merge(gene_hits, RNASEQ, by.x = 1, by.y = 2)
row.names(HITS) <- HITS$`intersect(FC24h, CHIPSEQ)`
View(HITS)
colnames(HITS)
# average expression by biological group (for plotting)
# only 24h
plotting_24h <- cbind(rowMeans(HITS[,16:18]), rowMeans(HITS[,19:21]), rowMeans(HITS[,22:24]), rowMeans(HITS[,25:27]))
View(plotting_24h)
# average expression by biological group (for plotting)
# only 24h
plotting_24h <- cbind(DMSO24 = rowMeans(HITS[,16:18]), rowMeans(HITS[,19:21]), rowMeans(HITS[,22:24]), rowMeans(HITS[,25:27]))
View(plotting_24h)
# average expression by biological group (for plotting)
# only 24h
plotting_24h <- cbind(DMSO24 = rowMeans(HITS[,16:18]),
MKC24 = rowMeans(HITS[,19:21]),
PACLITAXEL24 = rowMeans(HITS[,22:24]),
PACLITAXEL_MKC24 = rowMeans(HITS[,25:27]))
View(plotting_24h)
colnames(HITS)
# could do replicates
pheatmap(HITS[,16:21], scale= "row",  cluster_cols=FALSE,breaks = myBreaks,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h, scale= "row",  cluster_cols=FALSE,breaks = myBreaks,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
# average expression by biological group (for plotting)
# only 24h
plotting_24h <- as.data.frame(cbind(DMSO24 = rowMeans(HITS[,16:18]),
MKC24 = rowMeans(HITS[,19:21]),
PACLITAXEL24 = rowMeans(HITS[,22:24]),
PACLITAXEL_MKC24 = rowMeans(HITS[,25:27])) )
# subset only genes with desired trend
plotting_24h_trend <- subset(plotting_24h, plotting_24h$PACLITAXEL24 > plotting_24h$PACLITAXEL_MKC24)
### heatmap of hits
my_palette <- colorRampPalette(c("navy","white","orangered1"))(n = 299)
# could do replicates
pheatmap(HITS[,16:21], scale= "row",  cluster_cols=FALSE,breaks = myBreaks,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h_trend, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, border_color = 1, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h_trend, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h_trend, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, , border_color = NA, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h_trend, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, , border_color = NA, fontsize_col = 16, fontsize_row = 16)
venn(Venn_try)
# More fancy
DE_gns <- fromList(Venn_try)
upset(DE_gns , order.by = "freq")
# extract intersect genes
FC24h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC24h < -0.2)
FC8h = subset(RNASEQ$hgnc_symbol, RNASEQ$FC8h < -0.2)
CHIPSEQ = subset(as.character(CHIP_untreated_SHORT$symbol), CHIP_untreated_SHORT$score > 0)
gene_hits <- as.data.frame(intersect(FC24h,CHIPSEQ))
# gene expression data for "hits"
# select rows in the gene expression data that correspond to hit genes
HITS <- merge(gene_hits, RNASEQ, by.x = 1, by.y = 2)
row.names(HITS) <- HITS$`intersect(FC24h, CHIPSEQ)`
View(cleaned_norm_count_annot)
View(HITS)
# average expression by biological group (for plotting)
# only 24h
plotting_24h <- as.data.frame(cbind(DMSO24 = rowMeans(HITS[,16:18]),
MKC24 = rowMeans(HITS[,19:21]),
PACLITAXEL24 = rowMeans(HITS[,22:24]),
PACLITAXEL_MKC24 = rowMeans(HITS[,25:27])) )
# subset only genes with desired trend
plotting_24h_trend <- subset(plotting_24h, plotting_24h$PACLITAXEL24 > plotting_24h$PACLITAXEL_MKC24)
### heatmap of hits
my_palette <- colorRampPalette(c("navy","white","orangered1"))(n = 299)
# could do replicates
pheatmap(HITS[,16:21], scale= "row",  cluster_cols=FALSE,breaks = myBreaks,  show_rownames = TRUE, color = my_palette, legend = TRUE, fontsize_col = 16, fontsize_row = 16)
# or averages
pheatmap(plotting_24h_trend, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, , border_color = NA, fontsize_col = 16, fontsize_row = 16)
my_palette <- colorRampPalette(c("yellow","red","greed"))(n = 299)
my_palette <- colorRampPalette(c("yellow","red","green"))(n = 299)
# or averages
pheatmap(plotting_24h_trend, scale= "row",  cluster_cols=FALSE,  show_rownames = TRUE, color = my_palette, legend = TRUE, , border_color = NA, fontsize_col = 16, fontsize_row = 16)
?pheatmap
